#include <stdio.h>
#include <stdlib.h>

typedef struct _double_node
{
    int key; //데이터 값
    struct _double_node *prev;  //이전
    struct _double_node *next;  //다음

} double_node;

double_node *head,*tail;

void init_dlist(void)
{
    head = (double_node*)malloc(sizeof(double_node));
    tail = (double_node*)malloc(sizeof(double_node));
    head->next = tail;
    head->prev = head;
    tail->next = tail;
    tail->prev = head;

}

//k순서대로 오름차순 정렬 노드 만들기
void insert_double_node_in_order_of_size(int k)
{
    double_node *s = head;  //before node
    double_node *i = (double_node*)malloc(sizeof(double_node));  //new node
    i->key = k;

    /*i->prev=s;
    i->next=s->next;
    s->next->prev=i;
    s->prev=i;*/

    if(s->next == tail) //데이터가 하나도 없을 때
    {
        i->prev = head;
        i->next = tail; //i->next=tail
        tail->prev = i; //tail->prev=i
        head->next = i;
        return head;
    }
    else
    {
        while(s !=tail){
            if(s->key >= i->key){
                i->next=s;
                i->prev=s->prev;
                s->prev=i;
                break;
               // return head;
            }
            else if(s->key <= i->key){
                i->prev=s;
                i->next=s->next;
                s->next=i;
                break;
               //return head;
            }
        }
        s=s->next;
    }

    return i; // 무엇을 리턴?
}
void print_all(double_node *p)
{
   // double_node *p
    while(p!=tail){
        printf("%d",p->key);
        p=p->next;
    }
    printf("\n");
}

int main()
{
    double_node *t;
    init_dlist();

    insert_double_node_in_order_of_size(10);
    insert_double_node_in_order_of_size(8);
    insert_double_node_in_order_of_size(7);
    insert_double_node_in_order_of_size(1);
    insert_double_node_in_order_of_size(3);
    insert_double_node_in_order_of_size(5);
    insert_double_node_in_order_of_size(8);

    printf("\n Inital Linked list is\n");
    print_all(head->next);

    return 0;
}
